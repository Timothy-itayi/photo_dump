# Photo Drop Web Application

A simple web application that allows users to upload images directly to an AWS S3 bucket using pre-signed URLs, generated by an AWS Lambda function.

## Key Concepts

- **AWS S3 (Simple Storage Service)**: A scalable object storage service used to store and retrieve any amount of data, such as images, videos, and other files.
- **AWS Lambda**: A serverless computing service that allows you to run backend code (like generating pre-signed URLs) without managing servers.
- **Pre-signed URL**: A URL that allows users to upload files to a specific location in your S3 bucket, with permissions and expiration defined by the Lambda function.

## Features

- Allows users to upload photos directly to S3 using a browser interface.
- Uses a Lambda function to generate a pre-signed URL for uploading the file.
- GIF animation to guide users through the upload process.

---

## Prerequisites

Before you start, you need:

- **AWS Account**: You’ll need an AWS account to create and configure the Lambda function, API Gateway, and S3 bucket.
- **Node.js and npm** installed on your local machine.
- Basic knowledge of AWS Lambda, S3, and API Gateway.

---

## Setup

1. **Create an S3 Bucket**:
    - Log in to your AWS Management Console.
    - Go to **S3** and create a new bucket.
    - Configure the bucket permissions, ensuring it allows `PUT` access for your Lambda function (which will be configured later).
    - Update the **Bucket Policy** to allow public access for file uploads.
    
    Example Bucket Policy:

    ```json
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": "*",
          "Action": "s3:PutObject",
          "Resource": "arn:aws:s3:::your-bucket-name/*"
        }
      ]
    }
    ```

2. **Create an AWS Lambda Function**:
    - Go to the **AWS Lambda** console.
    - Create a new Lambda function with an appropriate role allowing `s3:PutObject` permissions.
    - Paste the Lambda function code provided (in this README) to generate the pre-signed URL.

3. **Configure API Gateway**:
    - In the **API Gateway** console, create a new REST API that triggers the Lambda function.
    - Set up a `GET` method for the `/get-presigned-url` endpoint to trigger the Lambda function and return the pre-signed URL.

4. **Create the HTML, and CSS for the Frontend**:
    - The frontend (in this repository) allows the user to choose a file and upload it via the pre-signed URL.
    - The HTML interface includes a file input, a button to trigger the upload, and a GIF to guide users.

5. **Deploy and Test**:
    - Deploy the frontend on any web server or locally using a simple HTTP server.
    - Test the file upload functionality by selecting a file and uploading it directly to your S3 bucket.

---

## How to Use the Application

1. Open the application in your browser (either locally or hosted on a server).
2. Select an image file to upload by clicking on the "Choose File" button.
3. Once the file is selected, click the "Upload" button.
4. The file will be uploaded directly to your S3 bucket, and a success message will appear once the upload is complete.

---

## Lambda Function Code Example

This Lambda function generates the pre-signed URL to upload the file directly to your S3 bucket:

```javascript
const AWS = require('aws-sdk');
const s3 = new AWS.S3();

exports.handler = async (event) => {
  const { fileName, fileType } = event.queryStringParameters;

  const params = {
    Bucket: 'your-bucket-name',
    Key: fileName,
    Expires: 60, // URL expiry time (in seconds)
    ContentType: fileType
  };

  try {
    const uploadURL = await s3.getSignedUrlPromise('putObject', params);
    return {
      statusCode: 200,
      body: JSON.stringify({ uploadURL }),
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ message: 'Error generating URL', error }),
    };
  }
};

## Project overview
├── index.html         # The main HTML file for the frontend
├── style.css          # CSS for styling the page
├── script.js          # JavaScript for handling the file upload
├── README.md          # This file
